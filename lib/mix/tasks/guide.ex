defmodule Mix.Tasks.Guide do
  @moduledoc """
  Guide is a tool that turns sobelow static code analysis results into
  markdown, that can be used to decorate pull requests of GitHub.

  This tool can be run with the following mix task:

  ```elixir
  mix guide --source <url to markdown file> \\
            --repo <name of repo in GitHub> \\
            --commit <commit hash of the latest commit>
  ```

  To decorate a PR you have to run these steps inside of a GitHub Action:

  1. mix sobelow --skip --format=json --out=./sobelow.results.json
  2. mix guide --source <url to markdown file> --repo <name of repo in GitHub> --commit <commit hash of the latest commit>
  3. gh pr comment <PR Number> --repo <name of repo in GitHub> -F comment.md

  ## Command line options

  * `--source`  - URL to markdown file, where recommendations can be extracted from.
  * `--repo` - Specify the name of your repository
  * `--commit` - Commit hash of the latest commit of our PR, is used to generate code snippets.
  * `--results` - File path of the results generated by sobelow. Has to be json. Defaults to: sobelow.results.json
  * `--target` - File path where to store the generated markdown, defaults to: comment.md
  """
  use Mix.Task

  @switches [
    repo: :string,
    commit: :string,
    results: :string,
    target: :string,
    source: :string
  ]

  # For escript entry
  def main(argv) do
    run(argv)
  end

  def run(argv) do
    {opts, _, _} = OptionParser.parse(argv, switches: @switches)

    results = Keyword.get(opts, :results, "sobelow.results.json")

    unless Keyword.get(opts, :source),
      do: raise("You must pass the url to the markdown via --source.")

    unless Keyword.get(opts, :repo),
      do: raise("You must pass the name of the repository via --repo.")

    unless Keyword.get(opts, :commit),
      do: raise("You must pass the commit hash via --commit.")

    unless File.exists?(results),
      do:
        raise("""
        Make sure to run sobelow first:
        mix sobelow --format=json --out=./sobelow.results.json
        """)

    case Guide.run(opts) do
      :ok ->
        IO.puts("Successfully prepared markdown:")
        IO.puts("#{Path.join(File.cwd!(), Keyword.get(opts, :target, "comment.md"))}")

        0

      _ ->
        IO.puts("Error. Could not prepare markdown.")
        1
    end
  end
end
